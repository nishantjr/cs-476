fmod SIMPLE-NAT is

    sort Nat .
    vars N M : Nat .

    op zero : -> Nat .
    --- eq zero = zero .        --- cjs just wanted to show that they're the
                                --- same value. Instead, infinite loop?
                                --- Why would it actually run anything for this.
                                --- N <- zero; M <- zero; M = N

    op id_ : Nat -> Nat .       --- identity function
    eq id N = N .

    op s_ : Nat -> Nat .        --- successor function

    op _+_ : Nat Nat -> Nat [ prec 31  ] .
    eq zero + N = N .
    eq s M + N = s ( M + N ) .

    op _*_ : Nat Nat -> Nat [ prec 33 ] .
    eq zero * N = zero .
    eq s M * N =  M * N + N  .

    op _>_ : Nat Nat -> Bool .
    eq zero > zero = false .
    eq zero > s N = false .
    eq s N > zero = true .
    eq s N > s M = N > M .

    op _>=_ : Nat Nat -> Bool .
    eq zero >= zero = true .
    eq zero >= s N = false .
    eq s N >= zero = true .
    eq s N >= s M = N >= M .

    op max : Nat Nat -> Nat [comm] .
    eq max(zero, zero) = zero .
    eq max(zero, s M) = s M .
    eq max(s N, s M) = s max(N, M) .

    op min : Nat Nat -> Nat [comm] .
    eq min(zero, zero) = zero .
    eq min(zero, s M) = zero .
    eq min(s N, s M) = s min(N, M) .

    op even : Nat -> Bool .
    eq even(zero) = true .
    eq even(s N) = not even(N) .

endfm

---(
    id :: a -> a
    id x = x
)
